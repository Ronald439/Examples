// Generated by CoffeeScript 1.4.0
/**
* Global beforeEach runs before all specs in all test files.
*/

var createComponentTestArea, getDependency;

beforeEach(function() {
  return this.addMatchers({
    /**
    * Add a global toBeBecause() matcher that accepts an optional failure message to better describe failed tests.
    * @param expected The expected value.
    * @param becauseMessage A custom message to show in the results instead of the useless default message.
    * @param {Boolean} verbose Defaults to false. If true, shows the expected and actual values in the message output.
    */

    toBeBecause: function(expected, becauseMessage, verbose) {
      var actual, notText;
      if (verbose == null) {
        verbose = false;
      }
      actual = this.actual;
      notText = (this.isNot ? " not" : "");
      this.message = function() {
        var result;
        if (verbose || !(becauseMessage != null)) {
          result = "Expected " + actual + notText + " to be " + expected;
          if (becauseMessage != null) {
            result += " because " + becauseMessage;
          }
        } else {
          result = "Failed because: " + becauseMessage;
        }
        return result;
      };
      return actual === expected;
    }
  });
});

/**
* Global helper function to add a componentTestArea div to the DOM for use in specs.
*/


createComponentTestArea = function() {
  if (Ext.get("componentTestArea") != null) {
    Ext.removeNode(Ext.get("componentTestArea").dom);
  }
  Ext.DomHelper.append(Ext.getBody(), '<div id="componentTestArea" style="visibility: hidden"></div>');
};

/**
* Global helper function to help in accessing DeftJS dependencies in specs
* @param String dependencyNames A comma-separated list of dependency provider names to return references for.
* @return If a single dependency name is passed, returns the reference. If a list of names are passed, returns an object containing the references.
*/


getDependency = function(dependencyNames) {
  var dependencyList, result, thisDependency, _i, _len;
  dependencyList = dependencyNames.split(",");
  if (dependencyList.length === 1) {
    return Deft.Injector.resolve(Ext.String.trim(dependencyList[0]));
  } else {
    result = {};
    for (_i = 0, _len = dependencyList.length; _i < _len; _i++) {
      thisDependency = dependencyList[_i];
      thisDependency = Ext.String.trim(thisDependency);
      result[thisDependency] = Deft.Injector.resolve(thisDependency);
    }
    return result;
  }
};
